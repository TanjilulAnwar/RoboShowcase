{"version":3,"sources":["images/loading.gif","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","loading","width","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4ab160d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.584b607f.gif\";","import React from 'react';\r\n\r\nconst Card =(props) =>{\r\n\r\n\tconst {id ,name, email} = props;\r\nreturn(\r\n\r\n<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n<img alt='robots'src={`https://robohash.org/${id}?200x200`}/>\r\n<div>\r\n<h2>{name}</h2>\r\n<p>{email}</p>\r\n</div>\r\n</div>\r\n \r\n\r\n\t);}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots})=>{\r\n\r\n\t/*if(true){\r\n\t\tthrow new Error(\"Oh no!!!!!!!\");\r\n\t}*/\r\nreturn(\r\n<div>\r\n\r\n{\r\n\trobots.map((user,i)=>{\r\n\t\treturn (\r\n\t     <Card\r\n\t\t key={i}\r\n\t\t id={robots[i].id}\r\n\t\t  name={robots[i].name}\r\n\t\t   email= {robots[i].email} />\r\n\r\n\t\t   );\r\n\t})\r\n\r\n}\r\n\t\r\n </div>\r\n\r\n\r\n\r\n\t);\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,SearchChange})=>{\r\n\r\nreturn(\r\n<div className=\"pa2\">\r\n<input className=\"pa2 ba b--blue bg-lightest-blue\" type=\"Search\" placeholder =\"Search here....\" onChange={SearchChange}/>\r\n</div>\r\n\t);\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n\r\nreturn (\r\n\t\r\n<div style = {{overflow:'scroll', border:'1px solid black', height:'500px'}}>\r\n{props.children}\r\n</div>\r\n\r\n\t);\r\n};\r\n\r\n\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\nconstructor(props){\r\n\r\n\tsuper(props);\r\n\tthis.state ={\r\n\t\thasError:false\r\n\t}\r\n}\r\n\r\n\r\ncomponentDidCatch(error,info){\r\n\tthis.setState({hasError:true})\r\n}\r\n\r\n\r\n\r\nrender(){\r\nif(this.state.hasError){\r\n\r\n\treturn <h1>Ooops. That's not good</h1>\r\n\r\n}\r\nreturn this.props.children\r\n\r\n\r\n\r\n}\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {connect} from 'react-redux'\r\n//import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\n\r\nimport './App.css' ;\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport{setSearchField,requestRobots} from '../actions'\r\n\r\nimport loading from '../images/loading.gif'\r\n\r\nconst mapStatetoProps =state=>{\r\n\treturn{\r\n\t\tsearchField:state.searchRobots.searchField,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\r\n}\r\n\r\n}\r\n\r\n\r\nclass App extends Component\r\n{\r\n\r\n\r\ncomponentDidMount(){\r\n \r\nthis.props.onRequestRobots();\r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\nconst {searchField,onSearchChange,robots,isPending} =this.props;\r\nconst filterRobots = robots.filter(robot=>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t})\r\n\r\nreturn isPending?\r\n\t(<div className=\"tc\"><img src={loading}alt='Loading..' width = \"70px\"/> </div>):\r\n(\r\n<div className=\"tc\">\r\n<h1 className=\"f1\">Robo Showcase 2.0</h1>\r\n<SearchBox SearchChange= {onSearchChange}/>\r\n<Scroll>\r\n<ErrorBoundry>\r\n  <CardList robots = {filterRobots}/>\r\n  </ErrorBoundry>\r\n</Scroll>\r\n</div>\r\n\t);\r\n\t\r\n\r\n\r\n\r\n\r\n}\r\n}\r\n\r\nexport default connect(mapStatetoProps,mapDispatchtoProps)(App);","import {CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\nexport const  setSearchField = (text) =>({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n\r\n\r\n})\r\n\r\nexport const  requestRobots= () => (dispatch) =>{\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,payload:error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n\r\nsearchField: ''\r\n\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\treturn Object.assign({},state,{searchField:action.payload});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\r\n\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\r\nisPending:false,\r\nrobots:[],\r\nerror:''\r\n\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({},state,{isPending:true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({},state,{robots:action.payload,isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({},state,{error:action.payload,isPending:false});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\r\n\r\n\t}\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\nimport {Provider} from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport 'tachyons';\r\nimport { searchRobots,requestRobots} from './reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\n const logger = createLogger();\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}